//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApiTest
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestDBEntities : DbContext
    {
        public TestDBEntities()
            : base("name=TestDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountLogin> AccountLogin { get; set; }
        public virtual DbSet<AccountType> AccountType { get; set; }
        public virtual DbSet<Bill> Bill { get; set; }
        public virtual DbSet<BillCheckRule> BillCheckRule { get; set; }
        public virtual DbSet<books> books { get; set; }
        public virtual DbSet<BusinessClass> BusinessClass { get; set; }
        public virtual DbSet<ClientSettlement> ClientSettlement { get; set; }
        public virtual DbSet<CompanyInfo> CompanyInfo { get; set; }
        public virtual DbSet<ConfigInfo> ConfigInfo { get; set; }
        public virtual DbSet<CooperateRegistInfo> CooperateRegistInfo { get; set; }
        public virtual DbSet<CooperateServiceInfo> CooperateServiceInfo { get; set; }
        public virtual DbSet<CRUDModel> CRUDModel { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Driver> Driver { get; set; }
        public virtual DbSet<DrivingLicenseType> DrivingLicenseType { get; set; }
        public virtual DbSet<ELRelationship> ELRelationship { get; set; }
        public virtual DbSet<Enterprise> Enterprise { get; set; }
        public virtual DbSet<EnterpriseBillCheck> EnterpriseBillCheck { get; set; }
        public virtual DbSet<EnterpriseOrderCheck> EnterpriseOrderCheck { get; set; }
        public virtual DbSet<EStaffOrderApproval> EStaffOrderApproval { get; set; }
        public virtual DbSet<EStaffOrderPermission> EStaffOrderPermission { get; set; }
        public virtual DbSet<EStaffOrderRule> EStaffOrderRule { get; set; }
        public virtual DbSet<EStaffUseInfo> EStaffUseInfo { get; set; }
        public virtual DbSet<EStaffUseVehicle> EStaffUseVehicle { get; set; }
        public virtual DbSet<Information> Information { get; set; }
        public virtual DbSet<LCBillAutoConfirm> LCBillAutoConfirm { get; set; }
        public virtual DbSet<LCSettlementRule> LCSettlementRule { get; set; }
        public virtual DbSet<LCStaff> LCStaff { get; set; }
        public virtual DbSet<LCValuation> LCValuation { get; set; }
        public virtual DbSet<LeasingCompany> LeasingCompany { get; set; }
        public virtual DbSet<LeasingCompanyGroup> LeasingCompanyGroup { get; set; }
        public virtual DbSet<LoginRelationship> LoginRelationship { get; set; }
        public virtual DbSet<LongRentDriverInfo> LongRentDriverInfo { get; set; }
        public virtual DbSet<LongRentVehicleInfo> LongRentVehicleInfo { get; set; }
        public virtual DbSet<LPRelationship> LPRelationship { get; set; }
        public virtual DbSet<MenuList> MenuList { get; set; }
        public virtual DbSet<OfflineBillCharge> OfflineBillCharge { get; set; }
        public virtual DbSet<OrderCheckRule> OrderCheckRule { get; set; }
        public virtual DbSet<OrderImplementRule> OrderImplementRule { get; set; }
        public virtual DbSet<OrderInfo> OrderInfo { get; set; }
        public virtual DbSet<OrderLocation> OrderLocation { get; set; }
        public virtual DbSet<OrderLocationHistory> OrderLocationHistory { get; set; }
        public virtual DbSet<OrderVehicleTravel> OrderVehicleTravel { get; set; }
        public virtual DbSet<PlatformLogin> PlatformLogin { get; set; }
        public virtual DbSet<Position> Position { get; set; }
        public virtual DbSet<SettlementRule> SettlementRule { get; set; }
        public virtual DbSet<ShowPermission> ShowPermission { get; set; }
        public virtual DbSet<StaffWorkInfo> StaffWorkInfo { get; set; }
        public virtual DbSet<TypeBelongs> TypeBelongs { get; set; }
        public virtual DbSet<UseCarInfo> UseCarInfo { get; set; }
        public virtual DbSet<UseCarInfo2> UseCarInfo2 { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserBase> UserBase { get; set; }
        public virtual DbSet<ValuationRulesInfo> ValuationRulesInfo { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
        public virtual DbSet<VehicleBrandValuation> VehicleBrandValuation { get; set; }
        public virtual DbSet<VehicleDriverRelationship> VehicleDriverRelationship { get; set; }
        public virtual DbSet<VehicleDriverWorking> VehicleDriverWorking { get; set; }
        public virtual DbSet<VehicleFixedPay> VehicleFixedPay { get; set; }
        public virtual DbSet<VehicleHandoverRecord> VehicleHandoverRecord { get; set; }
        public virtual DbSet<WorkTableDisplay> WorkTableDisplay { get; set; }
        public virtual DbSet<成绩表> 成绩表 { get; set; }
        public virtual DbSet<教师表> 教师表 { get; set; }
        public virtual DbSet<课程表> 课程表 { get; set; }
        public virtual DbSet<学生表> 学生表 { get; set; }
        public virtual DbSet<学生课程表> 学生课程表 { get; set; }
    
        [DbFunction("TestDBEntities", "SPLIT")]
        public virtual IQueryable<SPLIT_Result> SPLIT(string inputStr)
        {
            var inputStrParameter = inputStr != null ?
                new ObjectParameter("inputStr", inputStr) :
                new ObjectParameter("inputStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SPLIT_Result>("[TestDBEntities].[SPLIT](@inputStr)", inputStrParameter);
        }
    
        public virtual int book_page(string tableName, string reFieldsStr, string orderString, string whereString, Nullable<int> pageSize, Nullable<int> pageIndex, ObjectParameter totalRecord)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var reFieldsStrParameter = reFieldsStr != null ?
                new ObjectParameter("ReFieldsStr", reFieldsStr) :
                new ObjectParameter("ReFieldsStr", typeof(string));
    
            var orderStringParameter = orderString != null ?
                new ObjectParameter("OrderString", orderString) :
                new ObjectParameter("OrderString", typeof(string));
    
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("book_page", tableNameParameter, reFieldsStrParameter, orderStringParameter, whereStringParameter, pageSizeParameter, pageIndexParameter, totalRecord);
        }
    
        public virtual ObjectResult<book_temp_Result> book_temp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<book_temp_Result>("book_temp");
        }
    
        public virtual ObjectResult<charBooks_Result> charBooks(string bookAuth, string bookName)
        {
            var bookAuthParameter = bookAuth != null ?
                new ObjectParameter("bookAuth", bookAuth) :
                new ObjectParameter("bookAuth", typeof(string));
    
            var bookNameParameter = bookName != null ?
                new ObjectParameter("bookName", bookName) :
                new ObjectParameter("bookName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<charBooks_Result>("charBooks", bookAuthParameter, bookNameParameter);
        }
    
        public virtual int charBooks1(string bookAuth, ObjectParameter bookName)
        {
            var bookAuthParameter = bookAuth != null ?
                new ObjectParameter("bookAuth", bookAuth) :
                new ObjectParameter("bookAuth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("charBooks1", bookAuthParameter, bookName);
        }
    
        public virtual int getBookId(string bookAuth, ObjectParameter bookId)
        {
            var bookAuthParameter = bookAuth != null ?
                new ObjectParameter("bookAuth", bookAuth) :
                new ObjectParameter("bookAuth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getBookId", bookAuthParameter, bookId);
        }
    
        public virtual ObjectResult<string> proc_get_allBooks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_get_allBooks");
        }
    
        public virtual ObjectResult<searchBooks_Result> searchBooks(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("bookID", bookID) :
                new ObjectParameter("bookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchBooks_Result>("searchBooks", bookIDParameter);
        }
    
        public virtual ObjectResult<searchBooks1_Result> searchBooks1(Nullable<int> bookID, string bookAuth)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("bookID", bookID) :
                new ObjectParameter("bookID", typeof(int));
    
            var bookAuthParameter = bookAuth != null ?
                new ObjectParameter("bookAuth", bookAuth) :
                new ObjectParameter("bookAuth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchBooks1_Result>("searchBooks1", bookIDParameter, bookAuthParameter);
        }
    }
}
